@page "/documents"
@using MimeMapping

@inject VectorSearchService vectorSearchService
@inject DocumentService documentService
@inject IJSRuntime JSRuntime

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />
<PageTitle>Documents</PageTitle>

<h2 class="mb-4">Upload new document</h2>

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <div class="row">
        <div class="col-md-10 col-sm-9 col-10">
            <div class="input-group">
                <span class="input-group-text">
                    <Tooltip Title="PDF, DOCX, TXT and MD files are supported" Color="TooltipColor.Primary" Placement="TooltipPlacement.Bottom">
                        <Icon Class="d-flex text-body-secondary" Name="IconName.InfoCircle"></Icon>
                    </Tooltip>
                </span>
                <InputFile class="form-control" OnChange="HandleFileSelected" />
            </div>
        </div>
        <div class="col-md-2 col-sm-3 col-2">
            <div class="d-grid gap-2">
                <Button @ref="uploadButton" Type="ButtonType.Submit" Color="ButtonColor.Primary" To="#"><Icon Name="IconName.Upload" /><span class="d-none d-lg-inline ps-3">Upload</span></Button>
            </div>
        </div>
    </div>
</EditForm>

@if (documents.Count > 0)
{
    <h2 class="mt-4">Available documents</h2>

    <table class="table table-bordered table-striped table-hover">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Number of chunks</th>
                <th>Creation Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var document in documents)
            {
                <tr>
                    <td>
                        <InputCheckbox class="form-check-input" @bind-Value="document.IsSelected" @onchange="StateHasChanged" />
                    </td>
                    <td>@document.Name</td>
                    <td>@document.ChunkCount</td>
                    <td>@document.LocalCreationDateString</td>
                </tr>
            }
        </tbody>
    </table>

    <Button @ref="deleteButton" Color="ButtonColor.Danger" Disabled="@(!documents.Any(d => d.IsSelected))" @onclick="DeleteSelectedDocuments">
        <Icon Name="IconName.X" /><span class="d-none d-lg-inline ps-3">Delete</span>
    </Button>
}

@code {
    private Button uploadButton = default!;
    private Button deleteButton = default!;

    private IList<SelectableDocument> documents = [];
    private List<ToastMessage> messages = [];

    [SupplyParameterFromForm]
    public IBrowserFile? File { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentsAsync();
    }

    private async Task LoadDocumentsAsync()
    {
        var dbDocuments = await documentService.GetAsync();

        documents.Clear();
        foreach (var dbDocument in dbDocuments)
        {
            documents.Add(new SelectableDocument(dbDocument.Id, dbDocument.Name, dbDocument.CreationDate, dbDocument.ChunkCount)
                {
                    LocalCreationDateString = await JSRuntime.InvokeAsync<string>("getLocalTime", dbDocument.CreationDate)
                });
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        File = e.File;
    }

    private async Task HandleValidSubmit()
    {
        if (File is null)
        {
            return;
        }

        uploadButton.ShowLoading();

        try
        {
            await using var inputStream = File.OpenReadStream(20 * 1024 * 1024); // 20 MB
            await using var stream = await inputStream.GetMemoryStreamAsync();

            await vectorSearchService.ImportAsync(stream, File.Name, MimeUtility.GetMimeMapping(File.Name), null);


            CreateToastMessage(ToastType.Success, "Upload document", $"The document {File.Name} has been successfully uploaded and indexed.", DateTime.Now.ToString("g"));

            await LoadDocumentsAsync();
        }
        finally
        {
            uploadButton.HideLoading();
        }
    }

    private async Task DeleteSelectedDocuments()
    {
        var selectedDocuments = documents?.Where(d => d.IsSelected) ?? [];

        try
        {
            uploadButton.ShowLoading();

            foreach (var document in selectedDocuments)
            {
                await documentService.DeleteAsync(document.Id);
            }

            await LoadDocumentsAsync();
            CreateToastMessage(ToastType.Info, "Delete documents", "The selected documents have been successfully deleted.", DateTime.Now.ToString("g"));
        }
        finally
        {
            uploadButton.HideLoading();
        }
    }

    private void CreateToastMessage(ToastType toastType, string title, string message, string? helpText = null)
    {
        var toastMessage = new ToastMessage
            {
                Type = toastType,
                Title = title,
                HelpText = helpText,
                Message = message,
                AutoHide = true,
            };

        messages.Add(toastMessage);
    }

    private record class SelectableDocument(Guid Id, string Name, DateTimeOffset CreationDate, int ChunkCount) : Document(Id, Name, CreationDate, ChunkCount)
    {
        public bool IsSelected { get; set; }

        public string LocalCreationDateString { get; set; } = string.Empty;
    }
}
